// Code generated by go-bindata.
// sources:
// app/dist/assets/images/cover.png
// app/dist/assets/images/cover.svg
// app/dist/assets/images/icon.png
// app/dist/assets/images/logo.svg
// app/dist/index.html
// app/dist/static/css/app.0c179cbbd66654dba6e4cb4d83fb094f.css
// app/dist/static/css/app.0c179cbbd66654dba6e4cb4d83fb094f.css.map
// app/dist/static/js/app.b9c7aaf467d5b15ad4d5.js
// app/dist/static/js/app.b9c7aaf467d5b15ad4d5.js.map
// app/dist/static/js/manifest.fb2db463d5a47462efbe.js
// app/dist/static/js/manifest.fb2db463d5a47462efbe.js.map
// app/dist/static/js/vendor.ce9ecdec0268adb16096.js
// app/dist/static/js/vendor.ce9ecdec0268adb16096.js.map
// app/dist/static/vendor/font-awesome/css/font-awesome.min.css
// app/dist/static/vendor/font-awesome/fonts/FontAwesome.otf
// app/dist/static/vendor/font-awesome/fonts/fontawesome-webfont.eot
// app/dist/static/vendor/font-awesome/fonts/fontawesome-webfont.svg
// app/dist/static/vendor/font-awesome/fonts/fontawesome-webfont.ttf
// app/dist/static/vendor/font-awesome/fonts/fontawesome-webfont.woff
// app/dist/static/vendor/font-awesome/fonts/fontawesome-webfont.woff2
// DO NOT EDIT!

package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// distAssetsImagesCoverPng reads file data from disk. It returns an error on failure.
func distAssetsImagesCoverPng() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/assets/images/cover.png"
	name := "dist/assets/images/cover.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distAssetsImagesCoverSvg reads file data from disk. It returns an error on failure.
func distAssetsImagesCoverSvg() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/assets/images/cover.svg"
	name := "dist/assets/images/cover.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distAssetsImagesIconPng reads file data from disk. It returns an error on failure.
func distAssetsImagesIconPng() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/assets/images/icon.png"
	name := "dist/assets/images/icon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distAssetsImagesLogoSvg reads file data from disk. It returns an error on failure.
func distAssetsImagesLogoSvg() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/assets/images/logo.svg"
	name := "dist/assets/images/logo.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distIndexHtml reads file data from disk. It returns an error on failure.
func distIndexHtml() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/index.html"
	name := "dist/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticCssApp0c179cbbd66654dba6e4cb4d83fb094fCss reads file data from disk. It returns an error on failure.
func distStaticCssApp0c179cbbd66654dba6e4cb4d83fb094fCss() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/css/app.0c179cbbd66654dba6e4cb4d83fb094f.css"
	name := "dist/static/css/app.0c179cbbd66654dba6e4cb4d83fb094f.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticCssApp0c179cbbd66654dba6e4cb4d83fb094fCssMap reads file data from disk. It returns an error on failure.
func distStaticCssApp0c179cbbd66654dba6e4cb4d83fb094fCssMap() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/css/app.0c179cbbd66654dba6e4cb4d83fb094f.css.map"
	name := "dist/static/css/app.0c179cbbd66654dba6e4cb4d83fb094f.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticJsAppB9c7aaf467d5b15ad4d5Js reads file data from disk. It returns an error on failure.
func distStaticJsAppB9c7aaf467d5b15ad4d5Js() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/js/app.b9c7aaf467d5b15ad4d5.js"
	name := "dist/static/js/app.b9c7aaf467d5b15ad4d5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticJsAppB9c7aaf467d5b15ad4d5JsMap reads file data from disk. It returns an error on failure.
func distStaticJsAppB9c7aaf467d5b15ad4d5JsMap() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/js/app.b9c7aaf467d5b15ad4d5.js.map"
	name := "dist/static/js/app.b9c7aaf467d5b15ad4d5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticJsManifestFb2db463d5a47462efbeJs reads file data from disk. It returns an error on failure.
func distStaticJsManifestFb2db463d5a47462efbeJs() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/js/manifest.fb2db463d5a47462efbe.js"
	name := "dist/static/js/manifest.fb2db463d5a47462efbe.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticJsManifestFb2db463d5a47462efbeJsMap reads file data from disk. It returns an error on failure.
func distStaticJsManifestFb2db463d5a47462efbeJsMap() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/js/manifest.fb2db463d5a47462efbe.js.map"
	name := "dist/static/js/manifest.fb2db463d5a47462efbe.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticJsVendorCe9ecdec0268adb16096Js reads file data from disk. It returns an error on failure.
func distStaticJsVendorCe9ecdec0268adb16096Js() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/js/vendor.ce9ecdec0268adb16096.js"
	name := "dist/static/js/vendor.ce9ecdec0268adb16096.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticJsVendorCe9ecdec0268adb16096JsMap reads file data from disk. It returns an error on failure.
func distStaticJsVendorCe9ecdec0268adb16096JsMap() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/js/vendor.ce9ecdec0268adb16096.js.map"
	name := "dist/static/js/vendor.ce9ecdec0268adb16096.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticVendorFontAwesomeCssFontAwesomeMinCss reads file data from disk. It returns an error on failure.
func distStaticVendorFontAwesomeCssFontAwesomeMinCss() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/vendor/font-awesome/css/font-awesome.min.css"
	name := "dist/static/vendor/font-awesome/css/font-awesome.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticVendorFontAwesomeFontsFontawesomeOtf reads file data from disk. It returns an error on failure.
func distStaticVendorFontAwesomeFontsFontawesomeOtf() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/vendor/font-awesome/fonts/FontAwesome.otf"
	name := "dist/static/vendor/font-awesome/fonts/FontAwesome.otf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticVendorFontAwesomeFontsFontawesomeWebfontEot reads file data from disk. It returns an error on failure.
func distStaticVendorFontAwesomeFontsFontawesomeWebfontEot() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/vendor/font-awesome/fonts/fontawesome-webfont.eot"
	name := "dist/static/vendor/font-awesome/fonts/fontawesome-webfont.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticVendorFontAwesomeFontsFontawesomeWebfontSvg reads file data from disk. It returns an error on failure.
func distStaticVendorFontAwesomeFontsFontawesomeWebfontSvg() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/vendor/font-awesome/fonts/fontawesome-webfont.svg"
	name := "dist/static/vendor/font-awesome/fonts/fontawesome-webfont.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticVendorFontAwesomeFontsFontawesomeWebfontTtf reads file data from disk. It returns an error on failure.
func distStaticVendorFontAwesomeFontsFontawesomeWebfontTtf() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/vendor/font-awesome/fonts/fontawesome-webfont.ttf"
	name := "dist/static/vendor/font-awesome/fonts/fontawesome-webfont.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticVendorFontAwesomeFontsFontawesomeWebfontWoff reads file data from disk. It returns an error on failure.
func distStaticVendorFontAwesomeFontsFontawesomeWebfontWoff() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/vendor/font-awesome/fonts/fontawesome-webfont.woff"
	name := "dist/static/vendor/font-awesome/fonts/fontawesome-webfont.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// distStaticVendorFontAwesomeFontsFontawesomeWebfontWoff2 reads file data from disk. It returns an error on failure.
func distStaticVendorFontAwesomeFontsFontawesomeWebfontWoff2() (*asset, error) {
	path := "/Users/Mathias/Code/Go/src/github.com/cadenzr/cadenzr/app/dist/static/vendor/font-awesome/fonts/fontawesome-webfont.woff2"
	name := "dist/static/vendor/font-awesome/fonts/fontawesome-webfont.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/assets/images/cover.png":                                    distAssetsImagesCoverPng,
	"dist/assets/images/cover.svg":                                    distAssetsImagesCoverSvg,
	"dist/assets/images/icon.png":                                     distAssetsImagesIconPng,
	"dist/assets/images/logo.svg":                                     distAssetsImagesLogoSvg,
	"dist/index.html":                                                 distIndexHtml,
	"dist/static/css/app.0c179cbbd66654dba6e4cb4d83fb094f.css":        distStaticCssApp0c179cbbd66654dba6e4cb4d83fb094fCss,
	"dist/static/css/app.0c179cbbd66654dba6e4cb4d83fb094f.css.map":    distStaticCssApp0c179cbbd66654dba6e4cb4d83fb094fCssMap,
	"dist/static/js/app.b9c7aaf467d5b15ad4d5.js":                      distStaticJsAppB9c7aaf467d5b15ad4d5Js,
	"dist/static/js/app.b9c7aaf467d5b15ad4d5.js.map":                  distStaticJsAppB9c7aaf467d5b15ad4d5JsMap,
	"dist/static/js/manifest.fb2db463d5a47462efbe.js":                 distStaticJsManifestFb2db463d5a47462efbeJs,
	"dist/static/js/manifest.fb2db463d5a47462efbe.js.map":             distStaticJsManifestFb2db463d5a47462efbeJsMap,
	"dist/static/js/vendor.ce9ecdec0268adb16096.js":                   distStaticJsVendorCe9ecdec0268adb16096Js,
	"dist/static/js/vendor.ce9ecdec0268adb16096.js.map":               distStaticJsVendorCe9ecdec0268adb16096JsMap,
	"dist/static/vendor/font-awesome/css/font-awesome.min.css":        distStaticVendorFontAwesomeCssFontAwesomeMinCss,
	"dist/static/vendor/font-awesome/fonts/FontAwesome.otf":           distStaticVendorFontAwesomeFontsFontawesomeOtf,
	"dist/static/vendor/font-awesome/fonts/fontawesome-webfont.eot":   distStaticVendorFontAwesomeFontsFontawesomeWebfontEot,
	"dist/static/vendor/font-awesome/fonts/fontawesome-webfont.svg":   distStaticVendorFontAwesomeFontsFontawesomeWebfontSvg,
	"dist/static/vendor/font-awesome/fonts/fontawesome-webfont.ttf":   distStaticVendorFontAwesomeFontsFontawesomeWebfontTtf,
	"dist/static/vendor/font-awesome/fonts/fontawesome-webfont.woff":  distStaticVendorFontAwesomeFontsFontawesomeWebfontWoff,
	"dist/static/vendor/font-awesome/fonts/fontawesome-webfont.woff2": distStaticVendorFontAwesomeFontsFontawesomeWebfontWoff2,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"images": &bintree{nil, map[string]*bintree{
				"cover.png": &bintree{distAssetsImagesCoverPng, map[string]*bintree{}},
				"cover.svg": &bintree{distAssetsImagesCoverSvg, map[string]*bintree{}},
				"icon.png":  &bintree{distAssetsImagesIconPng, map[string]*bintree{}},
				"logo.svg":  &bintree{distAssetsImagesLogoSvg, map[string]*bintree{}},
			}},
		}},
		"index.html": &bintree{distIndexHtml, map[string]*bintree{}},
		"static": &bintree{nil, map[string]*bintree{
			"css": &bintree{nil, map[string]*bintree{
				"app.0c179cbbd66654dba6e4cb4d83fb094f.css":     &bintree{distStaticCssApp0c179cbbd66654dba6e4cb4d83fb094fCss, map[string]*bintree{}},
				"app.0c179cbbd66654dba6e4cb4d83fb094f.css.map": &bintree{distStaticCssApp0c179cbbd66654dba6e4cb4d83fb094fCssMap, map[string]*bintree{}},
			}},
			"js": &bintree{nil, map[string]*bintree{
				"app.b9c7aaf467d5b15ad4d5.js":          &bintree{distStaticJsAppB9c7aaf467d5b15ad4d5Js, map[string]*bintree{}},
				"app.b9c7aaf467d5b15ad4d5.js.map":      &bintree{distStaticJsAppB9c7aaf467d5b15ad4d5JsMap, map[string]*bintree{}},
				"manifest.fb2db463d5a47462efbe.js":     &bintree{distStaticJsManifestFb2db463d5a47462efbeJs, map[string]*bintree{}},
				"manifest.fb2db463d5a47462efbe.js.map": &bintree{distStaticJsManifestFb2db463d5a47462efbeJsMap, map[string]*bintree{}},
				"vendor.ce9ecdec0268adb16096.js":       &bintree{distStaticJsVendorCe9ecdec0268adb16096Js, map[string]*bintree{}},
				"vendor.ce9ecdec0268adb16096.js.map":   &bintree{distStaticJsVendorCe9ecdec0268adb16096JsMap, map[string]*bintree{}},
			}},
			"vendor": &bintree{nil, map[string]*bintree{
				"font-awesome": &bintree{nil, map[string]*bintree{
					"css": &bintree{nil, map[string]*bintree{
						"font-awesome.min.css": &bintree{distStaticVendorFontAwesomeCssFontAwesomeMinCss, map[string]*bintree{}},
					}},
					"fonts": &bintree{nil, map[string]*bintree{
						"FontAwesome.otf":           &bintree{distStaticVendorFontAwesomeFontsFontawesomeOtf, map[string]*bintree{}},
						"fontawesome-webfont.eot":   &bintree{distStaticVendorFontAwesomeFontsFontawesomeWebfontEot, map[string]*bintree{}},
						"fontawesome-webfont.svg":   &bintree{distStaticVendorFontAwesomeFontsFontawesomeWebfontSvg, map[string]*bintree{}},
						"fontawesome-webfont.ttf":   &bintree{distStaticVendorFontAwesomeFontsFontawesomeWebfontTtf, map[string]*bintree{}},
						"fontawesome-webfont.woff":  &bintree{distStaticVendorFontAwesomeFontsFontawesomeWebfontWoff, map[string]*bintree{}},
						"fontawesome-webfont.woff2": &bintree{distStaticVendorFontAwesomeFontsFontawesomeWebfontWoff2, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() http.FileSystem {
	for k := range _bintree.Children {
		return http.Dir(k)
	}
	panic("unreachable")
}
